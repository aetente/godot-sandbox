[gd_scene load_steps=8 format=3 uid="uid://d4kcesc808uqj"]

[ext_resource type="Texture2D" uid="uid://bb4fwqjcp6qun" path="res://assets/buildings/windows.png" id="1_k4don"]
[ext_resource type="Texture2D" uid="uid://bekmo1lt4qqvp" path="res://assets/buildings/windows2.png" id="1_vcv3h"]

[sub_resource type="Shader" id="Shader_ho68m"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform vec4 emission_color : source_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	//base_uv.x += sin(TIME) / 10.;
	vec4 wrld_vertex = INV_VIEW_MATRIX * vec4(VERTEX, 1.0);
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	float dots = sin(TIME*0.2*wrld_vertex.x + 10.*(base_uv.y)) + cos(TIME*0.5 - 10.*(base_uv.x));
	if (dots > 1.) {
		dots = 1.;
	}
	if (dots < 0.) {
		dots = 0.;
	}
	float emission_distance = 1.- pow(
		distance(emission_tex, emission_color.rgb),
		
		4. -
		2.8 *
		dots
		);
	float accumulate = 0.001;
	if (emission_distance < 0.9 ||
		mod(
			sin(base_uv.x * 2. + accumulate) +
			cos(base_uv.y * 2.),
		1.) < 0.95
	) {
		emission_distance = 0.;
	}
	if (emission_distance > 1.) {
		emission_distance = 1.;
	}
	EMISSION = (emission_tex)*emission_energy * emission_distance;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e2a7a"]
render_priority = 0
shader = SubResource("Shader_ho68m")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(1, 1, 1, 1)
shader_parameter/emission_color = Color(0.996078, 0.694118, 0.270588, 1)
shader_parameter/emission_energy = 3.0
shader_parameter/uv1_scale = Vector3(5, 5, 1)
shader_parameter/uv1_offset = Vector3(0.2, 0.23, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_vcv3h")
shader_parameter/texture_emission = ExtResource("1_k4don")

[sub_resource type="BoxMesh" id="BoxMesh_necsq"]
material = SubResource("ShaderMaterial_e2a7a")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_htgdb"]
albedo_color = Color(0.518604, 0.423371, 0.401346, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_d7sjb"]
material = SubResource("StandardMaterial3D_htgdb")

[node name="Node3D" type="Node3D"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 2.33092, 0, 0, 0, 1, 0, 1.15764, 0)
mesh = SubResource("BoxMesh_necsq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="MeshInstance3D"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0.501249, 0)
mesh = SubResource("PlaneMesh_d7sjb")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1.30531, 0, 0, 0, 1, 0, 0.66139, 1.01449)
mesh = SubResource("BoxMesh_necsq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="MeshInstance3D2"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0.501249, 0)
mesh = SubResource("PlaneMesh_d7sjb")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1.39855, 0, 0, 0, 1, 0, 0.693001, 2.04435)
mesh = SubResource("BoxMesh_necsq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="MeshInstance3D3"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0.501249, 0)
mesh = SubResource("PlaneMesh_d7sjb")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.932367, 0, 0, 0, 1, 0, 0.445583, 3.05884)
mesh = SubResource("BoxMesh_necsq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="MeshInstance3D4"]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0.501249, 0)
mesh = SubResource("PlaneMesh_d7sjb")
