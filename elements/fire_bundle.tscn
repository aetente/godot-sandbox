[gd_scene load_steps=8 format=3 uid="uid://d007pbt05fvup"]

[ext_resource type="PackedScene" uid="uid://uw6cdnmnbpd7" path="res://elements/firepart.tscn" id="1"]

[sub_resource type="Shader" id="Shader_ubbj3"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float x = VERTEX.x;
	float y = VERTEX.y;
	float z = VERTEX.z;
	
	VERTEX.xy *= y;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	
	float x = UV.x;
	float y = UV.y;
	
	float t = TIME * 4.;
	
	float alphav = pow(abs(sin(x/cos(x) * 16. + y/sin(y) * 16. + t) * cos(x*sin(x) * 16. + y*cos(y) * 16. + t)) , 10.);
	
	if (alphav > 0.6) {
		alphav = 0.6;
	}
	
	ALPHA = albedo.a * albedo_tex.a * alphav;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0mvba"]
render_priority = 0
shader = SubResource("Shader_ubbj3")
shader_parameter/albedo = Color(1, 0.752941, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="SphereMesh" id="SphereMesh_nt76t"]
material = SubResource("ShaderMaterial_0mvba")
radial_segments = 6
rings = 3

[sub_resource type="Shader" id="Shader_e70oo"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float x = VERTEX.x;
	float y = VERTEX.y;
	float z = VERTEX.z;
	
	VERTEX.xy *= y;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	
	float x = UV.x;
	float y = UV.y;
	
	float t = TIME * 4.;
	
	float alphav = pow(abs(sin(x/cos(x) * 16. + y/sin(y) * 16. + t) * cos(x*sin(x) * 16. + y*cos(y) * 16. + t)) , 10.);
	
	if (alphav > 0.6) {
		alphav = 0.6;
	}
	
	ALPHA = albedo.a * albedo_tex.a * alphav;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7xu8r"]
render_priority = 0
shader = SubResource("Shader_e70oo")
shader_parameter/albedo = Color(1, 0.0352941, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="SphereMesh" id="SphereMesh_8irhn"]
material = SubResource("ShaderMaterial_7xu8r")
radial_segments = 6
rings = 3

[node name="fire_bundle" type="Node3D"]

[node name="firepart" parent="." instance=ExtResource("1")]
mesh = SubResource("SphereMesh_nt76t")

[node name="firepart2" parent="." instance=ExtResource("1")]
transform = Transform3D(0.281388, -3.06152e-07, -0.347318, 8.14875e-08, 2.63, -9.49186e-10, 0.347318, -3.69012e-07, 0.281388, 0, 0, 0)
mesh = SubResource("SphereMesh_8irhn")

[node name="firepart3" parent="." instance=ExtResource("1")]
transform = Transform3D(0.339932, -3.69944e-07, -0.419578, 9.84412e-08, 3.178, -1.14667e-09, 0.419578, -4.45901e-07, 0.339932, 0, 0, 0)
